{
  "address": "0xdC644171cC29442D94bcd811f966b4f4488acaC5",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "OnlyRouterCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "UnexpectedRequestID",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "ContractAuthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "ContractDeauthorized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "InsuranceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "insuree",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "InsuranceBought",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "insuree",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        }
      ],
      "name": "InsuranceClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "character",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "Response",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "validator",
          "type": "address"
        }
      ],
      "name": "ValidatorAdded",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "alreadyFundedInsuranceProviders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "character",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "lat",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lon",
          "type": "string"
        }
      ],
      "name": "claimInsurancePayout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "claimablePayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "fundInsurance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFundedInsuranceProviders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "getInsuranceFunds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInsuranceProviders",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasProvidedLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "insuranceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insuranceIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insuranceliquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insurancelps",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "insurances",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isRegistered",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "end",
          "type": "uint256"
        },
        {
          "internalType": "enum InsuranceData.TypeOfInsurance",
          "name": "typeOfIns",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "riskNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "riskDenominator",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registeredInsuranceProviderAddress",
          "type": "address"
        }
      ],
      "name": "isInsuranceProviderRegistered",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        }
      ],
      "name": "isNotInsured",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityperlp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numFundedInsuranceProviders",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOfInsuranceProviders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "numliquidityproviders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "insuranceid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "insuree",
          "type": "address"
        }
      ],
      "name": "payout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "providers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_insuranceName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        },
        {
          "internalType": "enum InsuranceData.TypeOfInsurance",
          "name": "_typeOfIns",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_riskNumerator",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_riskDenominator",
          "type": "uint256"
        }
      ],
      "name": "registerInsurance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        }
      ],
      "name": "registerInsuranceProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "successfulRegistration",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerValidator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastError",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastRequestId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastResponse",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa61bf92bec74d42dab9cbcac5ba9284281f6dd2441bb22c2e5e657bf08f58170",
  "receipt": {
    "to": null,
    "from": "0xD5c08CfBe6C6663e0A3203DA8d5CFECbF10116dB",
    "contractAddress": "0xdC644171cC29442D94bcd811f966b4f4488acaC5",
    "transactionIndex": 49,
    "gasUsed": "2123089",
    "logsBloom": "0x
    "blockHash": "0xafda56495e42aabdd1747489cc6c0b0b779939090e0a0688037fcceb13bf3a9a",
    "transactionHash": "0xa61bf92bec74d42dab9cbcac5ba9284281f6dd2441bb22c2e5e657bf08f58170",
    "logs": [],
    "blockNumber": 6303208,
    "cumulativeGasUsed": "7647394",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "45789c2660decdcd0e252c2138830ecb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"OnlyRouterCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"UnexpectedRequestID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"ContractDeauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"InsuranceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuree\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"InsuranceBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"insuree\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"}],\"name\":\"InsuranceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"character\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"Response\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validator\",\"type\":\"address\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"alreadyFundedInsuranceProviders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"character\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"lat\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lon\",\"type\":\"string\"}],\"name\":\"claimInsurancePayout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"claimablePayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"fundInsurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundedInsuranceProviders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"getInsuranceFunds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInsuranceProviders\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasProvidedLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"insuranceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insuranceIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insuranceliquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insurancelps\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"insurances\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"enum InsuranceData.TypeOfInsurance\",\"name\":\"typeOfIns\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"riskNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"riskDenominator\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registeredInsuranceProviderAddress\",\"type\":\"address\"}],\"name\":\"isInsuranceProviderRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"}],\"name\":\"isNotInsured\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityperlp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numFundedInsuranceProviders\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOfInsuranceProviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"numliquidityproviders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"insuranceid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"insuree\",\"type\":\"address\"}],\"name\":\"payout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_insuranceName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"internalType\":\"enum InsuranceData.TypeOfInsurance\",\"name\":\"_typeOfIns\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_riskNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_riskDenominator\",\"type\":\"uint256\"}],\"name\":\"registerInsurance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"}],\"name\":\"registerInsuranceProvider\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"successfulRegistration\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastError\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastRequestId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastResponse\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(uint256)\":{\"details\":\"Buy weather insurance.\"},\"claimInsurancePayout(uint256,string,string)\":{\"details\":\"Claim insurance\"},\"constructor\":{\"details\":\"Constructor      initialize global variable for insurance ids\"},\"fundInsurance(uint256)\":{\"details\":\"liquidity providers can deposit funds in any amount to support any insurance\"},\"getInsuranceFunds(uint256)\":{\"details\":\"to see how much fund an insurance is supported with\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"details\":\"Either response or error parameter will be set, but never both.\",\"params\":{\"err\":\"Aggregated error either from the request's source code or from the execution pipeline.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the request's source code.\"}},\"payout(uint256,address)\":{\"details\":\"Transfers eligible payout funds to insuree\"},\"registerInsurance(string,uint256,uint256,uint8,string,uint256,uint256)\":{\"details\":\"Register insurance by provising all required fields. The caller should be an insurance provider\"},\"registerInsuranceProvider(address)\":{\"details\":\"Add an insurance to the registration queue      Can only be called from InsuranceApp contract\"},\"registerValidator()\":{\"details\":\"to register a validator.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/InsuranceData.sol\":\"InsuranceData\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0xed75be0eaba358d468f1fe18adc377d5044f57eff0070081f884a1f212d0adc2\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0xc72eb037effef32146f7cd4086af00f44f28c8649d891e5e404fec5fda7e802b\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0xdcb0e9135ddbe71ee27ba99fa06656960c66c964cf2ecb29696da1c1427d9861\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x2422a055657a87e98be61f8f31abb1824ec50fd0f73949f4e3c6ac877efb6da8\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"contracts/InsuranceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.24;\\n\\nimport { FunctionsClient } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/FunctionsClient.sol\\\";\\nimport { ConfirmedOwner } from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport { FunctionsRequest } from \\\"@chainlink/contracts/src/v0.8/functions/v1_0_0/libraries/FunctionsRequest.sol\\\";\\n\\ncontract InsuranceData is FunctionsClient, ConfirmedOwner {\\n  /********************************************************************************************/\\n  /*                                       DATA VARIABLES                                     */\\n  /********************************************************************************************/\\n  using FunctionsRequest for FunctionsRequest.Request;\\n  bytes32 public s_lastRequestId;\\n  bytes public s_lastResponse;\\n  bytes public s_lastError;\\n\\n  address private contractOwner; // Account used to deploy contract\\n  mapping(address => bool) private registeredInsuranceProvider;\\n  mapping(address => bool) private authorizedContracts;\\n  address[] public providers;\\n\\n  uint8 public numFundedInsuranceProviders;\\n  address[] public alreadyFundedInsuranceProviders;\\n  mapping(uint256 => uint256) public numliquidityproviders;\\n  mapping(uint256 => address[]) public insurancelps;\\n  mapping(uint256 => uint256) public insuranceliquidity;\\n  mapping(uint256 => mapping(address => bool)) public hasProvidedLiquidity;\\n  mapping(address => mapping(uint256 => uint256)) public claimablePayout;\\n  enum TypeOfInsurance {\\n    Rain,\\n    Heat,\\n    ExtremeConditions\\n  }\\n  struct Insurance {\\n    bool isRegistered;\\n    uint256 start;\\n    uint256 end;\\n    TypeOfInsurance typeOfIns;\\n    address provider;\\n    string name;\\n    string description;\\n    uint256 riskNumerator;\\n    uint256 riskDenominator;\\n  }\\n  mapping(uint256 => Insurance) public insurances;\\n  mapping(uint256 => mapping(address => uint256)) public liquidityperlp;\\n  mapping(address => mapping(uint256 => bool)) private clientinsured;\\n  mapping(uint256 => address[]) private insuranceProviderInsurees;\\n  mapping(address => mapping(uint256 => uint)) insuredamount;\\n  mapping(address => uint) private fundedinsurance;\\n  mapping(uint256 => mapping(address => uint)) insuredpayout;\\n  uint256 public insuranceId;\\n  address[] private validators;\\n  uint256[] public insuranceIds;\\n  mapping(address => bool) private validatorAlreadyExists;\\n  event ContractAuthorized(address contractAddress);\\n  event ContractDeauthorized(address contractAddress);\\n  event InsuranceBought(address insuree, uint256 insuranceid);\\n  event InsuranceAdded(uint256 insuranceid);\\n  event ValidatorAdded(address validator);\\n  event InsuranceClaimed(address insuree, uint256 payout);\\n  // Custom error type\\n  error UnexpectedRequestID(bytes32 requestId);\\n\\n  // Event to log responses\\n  event Response(bytes32 indexed requestId, string character, bytes response, bytes err);\\n\\n  // Router address - Hardcoded for Sepolia\\n  // Check to get the router address for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n  address router = 0xb83E47C2bC239B3bf370bc41e1459A34b41238D0;\\n\\n  // JavaScript source code\\n  // Fetch character name from the Star Wars API.\\n  // Documentation: https://swapi.info/people\\n  string source =\\n    \\\"const characterId = args[0];\\\"\\n    \\\"const apiResponse = await Functions.makeHttpRequest({\\\"\\n    \\\"url: `https://swapi.info/api/people/${characterId}/`\\\"\\n    \\\"});\\\"\\n    \\\"if (apiResponse.error) {\\\"\\n    \\\"throw Error('Request failed');\\\"\\n    \\\"}\\\"\\n    \\\"const { data } = apiResponse;\\\"\\n    \\\"return Functions.encodeString(data.name);\\\";\\n\\n  //Callback gas limit\\n  uint32 gasLimit = 300000;\\n\\n  // donID - Hardcoded for Sepolia\\n  // Check to get the donID for your supported network https://docs.chain.link/chainlink-functions/supported-networks\\n  bytes32 donID = 0x66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000;\\n\\n  // State variable to store the returned character information\\n  string public character;\\n\\n  /********************************************************************************************/\\n  /*                                       EVENT DEFINITIONS                                  */\\n  /********************************************************************************************/\\n\\n  /**\\n   * @dev Constructor\\n   *      initialize global variable for insurance ids\\n   */\\n  constructor() FunctionsClient(router) ConfirmedOwner(msg.sender) {\\n    contractOwner = msg.sender;\\n    insuranceId = 0;\\n  }\\n\\n  /**\\n   * @dev Modifier that requires the \\\"ContractOwner\\\" account to be the function caller\\n   */\\n  modifier requireContractOwner() {\\n    require(msg.sender == contractOwner, \\\"Caller is not contract owner\\\");\\n    _;\\n  }\\n\\n  modifier requireIsCallerInsuranceRegistered(address caller) {\\n    require(registeredInsuranceProvider[caller] == true, \\\"Caller not registered\\\");\\n    _;\\n  }\\n\\n  /********************************************************************************************/\\n  /*                                       UTILITY FUNCTIONS                                  */\\n  /********************************************************************************************/\\n\\n  function isNotInsured(uint256 insuranceid) external view returns (bool) {\\n    uint amount = insuredamount[msg.sender][insuranceid];\\n    return (amount == 0);\\n  }\\n\\n  function isInsuranceProviderRegistered(address registeredInsuranceProviderAddress) public view returns (bool) {\\n    return registeredInsuranceProvider[registeredInsuranceProviderAddress];\\n  }\\n  function numOfInsuranceProviders() public view returns (uint count) {\\n    return providers.length;\\n  }\\n\\n  /********************************************************************************************/\\n  /*                                     SMART CONTRACT FUNCTIONS                             */\\n  /********************************************************************************************/\\n  /**\\n   * @dev Add an insurance to the registration queue\\n   *      Can only be called from InsuranceApp contract\\n   *\\n   */\\n  function registerInsuranceProvider(address _provider) external returns (bool successfulRegistration) {\\n    registeredInsuranceProvider[_provider] = true;\\n    successfulRegistration = true;\\n    providers.push(_provider);\\n    return successfulRegistration;\\n  }\\n  /**\\n   * @dev Register insurance by provising all required fields. The caller should be an insurance provider\\n   */\\n  function registerInsurance(\\n    string calldata _insuranceName,\\n    uint256 _start,\\n    uint256 _end,\\n    TypeOfInsurance _typeOfIns,\\n    string calldata _description,\\n    uint256 _riskNumerator,\\n    uint256 _riskDenominator\\n  ) external payable returns (uint256) {\\n    require(msg.value > 0, \\\"The insurance provider should fund the insurance\\\");\\n    insurances[insuranceId] = Insurance({\\n      isRegistered: true,\\n      start: _start,\\n      end: _end,\\n      provider: msg.sender,\\n      typeOfIns: _typeOfIns,\\n      name: _insuranceName,\\n      description: _description,\\n      riskNumerator: _riskNumerator,\\n      riskDenominator: _riskDenominator\\n    });\\n    insurancelps[insuranceId].push(msg.sender);\\n    insuranceIds.push(insuranceId);\\n    insuranceliquidity[insuranceId] = msg.value;\\n    liquidityperlp[insuranceId][msg.sender] = msg.value;\\n    emit InsuranceAdded(insuranceId);\\n    insuranceId++;\\n    return insuranceId;\\n  }\\n\\n  /**\\n   * @dev to register a validator.\\n   */\\n  function registerValidator() external {\\n    require(!validatorAlreadyExists[msg.sender], \\\"Validator is already registered\\\");\\n    validators.push(msg.sender);\\n    emit ValidatorAdded(msg.sender);\\n  }\\n  function getInsuranceProviders() external view returns (address[] memory) {\\n    return providers;\\n  }\\n\\n  function getFundedInsuranceProviders() external view returns (address[] memory) {\\n    return alreadyFundedInsuranceProviders;\\n  }\\n\\n  /**\\n   * @dev liquidity providers can deposit funds in any amount to support any insurance\\n   */\\n  function fundInsurance(uint256 insuranceid) public payable returns (uint) {\\n    require(\\n      hasProvidedLiquidity[insuranceid][msg.sender],\\n      \\\"The liquidity provider has already provisioned liquidity for this insurance\\\"\\n    );\\n    numliquidityproviders[insuranceid]++;\\n    insuranceliquidity[insuranceid] = insuranceliquidity[insuranceid] + msg.value;\\n    insurancelps[insuranceid].push(msg.sender);\\n    liquidityperlp[insuranceid][msg.sender] = msg.value;\\n    return insuranceid;\\n  }\\n\\n  /**\\n   * @dev to see how much fund an insurance is supported with\\n   */\\n  function getInsuranceFunds(uint256 insuranceid) external view returns (uint256) {\\n    return insuranceliquidity[insuranceid];\\n  }\\n  /**\\n   * @dev Buy weather insurance.\\n   *\\n   */\\n\\n  function buy(uint256 insuranceid) external payable {\\n    require(!clientinsured[msg.sender][insuranceid], \\\"The client has already taken this type of insurance\\\");\\n    require(msg.value > 0, \\\"The client should send ETH to buy insurance\\\");\\n    uint256 temppayout = msg.value * insurances[insuranceid].riskDenominator;\\n    require(temppayout < insuranceliquidity[insuranceid], \\\"You should buy with less ETH\\\");\\n    claimablePayout[msg.sender][insuranceid] = temppayout;\\n    clientinsured[msg.sender][insuranceid] = true;\\n    insuranceProviderInsurees[insuranceid].push(msg.sender);\\n    insuredamount[msg.sender][insuranceid] = msg.value;\\n    for (uint256 i = 0; i < insurancelps[insuranceid].length; i++) {\\n      uint lpperc = (liquidityperlp[insuranceid][insurancelps[insuranceid][i]] / insuranceliquidity[insuranceId]) * 100;\\n      uint lpamount = lpperc * msg.value;\\n      payable(insurancelps[insuranceid][i]).transfer(lpamount);\\n    }\\n    emit InsuranceBought(msg.sender, insuranceid);\\n    insuredpayout[insuranceid][msg.sender] = 0;\\n  }\\n\\n  /**\\n   *  @dev Transfers eligible payout funds to insuree\\n   *\\n   */\\n  function payout(uint256 insuranceid, address insuree) external returns (uint) {\\n    require(insuredpayout[insuranceid][insuree] == 0, \\\"The client has already claimed payout\\\");\\n    uint insureepayout = claimablePayout[insuree][insuranceid];\\n    payable(insuree).transfer(insureepayout);\\n    insuredpayout[insuranceid][insuree] = insureepayout;\\n    emit InsuranceClaimed(insuree, insureepayout);\\n    return insureepayout;\\n  }\\n\\n  /**\\n   *  @dev Claim insurance\\n   *\\n   */\\n  function claimInsurancePayout(\\n    uint256 insuranceid,\\n    string calldata lat,\\n    string calldata lon\\n  ) external returns (bool) {}\\n\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal override {\\n    if (s_lastRequestId != requestId) {\\n      revert UnexpectedRequestID(requestId); // Check if request IDs match\\n    }\\n    // Update the contract's state variables with the response and any errors\\n    s_lastResponse = response;\\n    character = string(response);\\n    s_lastError = err;\\n\\n    // Emit an event to log the response\\n    emit Response(requestId, character, s_lastResponse, s_lastError);\\n  }\\n\\n  /**\\n   * @dev Fallback functions when retrieving ether.\\n   *\\n   */\\n  // Function to receive Ether. msg.data must be empty\\n  receive() external payable {}\\n\\n  // Fallback function is called when msg.data is not empty\\n  fallback() external payable {}\\n}\\n\",\"keccak256\":\"0xabd0d7046b71a12dc02f3d14b3b39b18190a1776ba0c59d75b76dd0979343ec8\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x601b80546001600160a01b03191673b83e47c2bc239b3bf370bc41e1459a34b41238d01790556101e060405261010560a0818152906200229e60c039601c906200004a90826200029a565b50601d805463ffffffff1916620493e01790557f66756e2d657468657265756d2d7365706f6c69612d3100000000000000000000601e553480156200008e57600080fd5b50601b546001600160a01b03166080523380600081620000f55760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b03848116919091179091558116156200012857620001288162000148565b5050600580546001600160a01b0319163317905550600060175562000366565b336001600160a01b03821603620001a25760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606401620000ec565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200021e57607f821691505b6020821081036200023f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000295576000816000526020600020601f850160051c81016020861015620002705750805b601f850160051c820191505b8181101562000291578281556001016200027c565b5050505b505050565b81516001600160401b03811115620002b657620002b6620001f3565b620002ce81620002c7845462000209565b8462000245565b602080601f831160018114620003065760008415620002ed5750858301515b600019600386901b1c1916600185901b17855562000291565b600085815260208120601f198616915b82811015620003375788860151825594840194600190910190840162000316565b5085821015620003565787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051611f1c6200038260003960006107170152611f1c6000f3fe6080604052600436106101e75760003560e01c806360e6c3a21161010e578063b6b1ccf0116100a7578063c33c097d11610079578063d0beac3f11610061578063d0beac3f146106ac578063d96a094a146106d9578063f2fde38b146106ec57005b8063c33c097d1461066c578063cfa29c441461067f57005b8063b6b1ccf0146105f7578063b8e12d4e14610617578063bcc6587f14610637578063be95e01a1461064c57005b806383cb0c81116100e057806383cb0c811461058e5780638da5cb5b146105a3578063b1e21749146105c1578063b5bc78ed146105d757005b806360e6c3a21461048f57806369e88be7146104bb5780636de994c5146104e857806379ba50971461057957005b80634b0795a81161018057806351ca570a1161015257806351ca570a146103f857806352ac183b1461043157806359fb49f9146104445780635acf77b01461047957005b80634b0795a8146103815780634d2e03a0146103965780634d7fedfa146103ab57806350f3fc81146103c057005b80632f8ff3a2116101b95780632f8ff3a2146102b35780633944ea3a146102eb578063430605391461030d578063477099661461034857005b80630ca76175146101f0578063102ec4a21461021057806315bef4501461024b578063212414181461029157005b366101ee57005b005b3480156101fc57600080fd5b506101ee61020b366004611857565b61070c565b34801561021c57600080fd5b5061023661022b36600461190d565b600095945050505050565b60405190151581526020015b60405180910390f35b34801561025757600080fd5b506102836102663660046119a3565b601160209081526000928352604080842090915290825290205481565b604051908152602001610242565b34801561029d57600080fd5b506102a66107a9565b60405161024291906119cf565b3480156102bf57600080fd5b506102836102ce366004611a1c565b600f60209081526000928352604080842090915290825290205481565b3480156102f757600080fd5b5061030061080b565b6040516102429190611a8c565b34801561031957600080fd5b506102366103283660046119a3565b600e60209081526000928352604080842090915290825290205460ff1681565b34801561035457600080fd5b50610236610363366004611aa6565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561038d57600080fd5b50610300610899565b3480156103a257600080fd5b506103006108a6565b3480156103b757600080fd5b50600854610283565b3480156103cc57600080fd5b506103e06103db366004611ac1565b6108b3565b6040516001600160a01b039091168152602001610242565b34801561040457600080fd5b50610236610413366004611ac1565b33600090815260146020908152604080832093835292905220541590565b61028361043f366004611ac1565b6108dd565b34801561045057600080fd5b5061046461045f366004611ac1565b610a32565b60405161024299989796959493929190611af0565b34801561048557600080fd5b5061028360175481565b34801561049b57600080fd5b506009546104a99060ff1681565b60405160ff9091168152602001610242565b3480156104c757600080fd5b506102836104d6366004611ac1565b600d6020526000908152604090205481565b3480156104f457600080fd5b50610236610503366004611aa6565b6001600160a01b03166000818152600660205260408120805460ff1916600190811790915560088054808301825592527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909101805473ffffffffffffffffffffffffffffffffffffffff191690921790915590565b34801561058557600080fd5b506101ee610b9d565b34801561059a57600080fd5b506102a6610c5b565b3480156105af57600080fd5b506000546001600160a01b03166103e0565b3480156105cd57600080fd5b5061028360025481565b3480156105e357600080fd5b506102836105f2366004611ac1565b610cbb565b34801561060357600080fd5b506103e0610612366004611ac1565b610cdc565b34801561062357600080fd5b506103e0610632366004611b79565b610cec565b34801561064357600080fd5b506101ee610d24565b34801561065857600080fd5b506102836106673660046119a3565b610e0b565b61028361067a366004611b9b565b610f59565b34801561068b57600080fd5b5061028361069a366004611ac1565b600b6020526000908152604090205481565b3480156106b857600080fd5b506102836106c7366004611ac1565b6000908152600d602052604090205490565b6101ee6106e7366004611ac1565b61127b565b3480156106f857600080fd5b506101ee610707366004611aa6565b6115e5565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461076e576040517fc6829f8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107798383836115f9565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6060600a80548060200260200160405190810160405280929190818152602001828054801561080157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107e3575b5050505050905090565b6003805461081890611c49565b80601f016020809104026020016040519081016040528092919081815260200182805461084490611c49565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b505050505081565b6004805461081890611c49565b601f805461081890611c49565b600881815481106108c357600080fd5b6000918252602090912001546001600160a01b0316905081565b6000818152600e6020908152604080832033845290915281205460ff166109975760405162461bcd60e51b815260206004820152604b60248201527f546865206c69717569646974792070726f76696465722068617320616c72656160448201527f64792070726f766973696f6e6564206c697175696469747920666f722074686960648201527f7320696e737572616e6365000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b6000828152600b602052604081208054916109b183611c99565b90915550506000828152600d60205260409020546109d0903490611cb3565b6000838152600d6020908152604080832093909355600c8152828220805460018101825590835281832001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155858352601182528383209083529052203490555090565b6010602052600090815260409020805460018201546002830154600384015460048501805460ff9586169694959394938316936101009093046001600160a01b0316929190610a8090611c49565b80601f0160208091040260200160405190810160405280929190818152602001828054610aac90611c49565b8015610af95780601f10610ace57610100808354040283529160200191610af9565b820191906000526020600020905b815481529060010190602001808311610adc57829003601f168201915b505050505090806005018054610b0e90611c49565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3a90611c49565b8015610b875780601f10610b5c57610100808354040283529160200191610b87565b820191906000526020600020905b815481529060010190602001808311610b6a57829003601f168201915b5050505050908060060154908060070154905089565b6001546001600160a01b03163314610bf75760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161098e565b600080543373ffffffffffffffffffffffffffffffffffffffff19808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60606008805480602002602001604051908101604052809291908181526020018280548015610801576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116107e3575050505050905090565b60198181548110610ccb57600080fd5b600091825260209091200154905081565b600a81815481106108c357600080fd5b600c6020528160005260406000208181548110610d0857600080fd5b6000918252602090912001546001600160a01b03169150829050565b336000908152601a602052604090205460ff1615610d845760405162461bcd60e51b815260206004820152601f60248201527f56616c696461746f7220697320616c7265616479207265676973746572656400604482015260640161098e565b601880546001810182556000919091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e01805473ffffffffffffffffffffffffffffffffffffffff1916339081179091556040519081527fe366c1c0452ed8eec96861e9e54141ebff23c9ec89fe27b996b45f5ec38849879060200160405180910390a1565b60008281526016602090815260408083206001600160a01b038516845290915281205415610ea15760405162461bcd60e51b815260206004820152602560248201527f54686520636c69656e742068617320616c726561647920636c61696d6564207060448201527f61796f7574000000000000000000000000000000000000000000000000000000606482015260840161098e565b6001600160a01b0382166000818152600f6020908152604080832087845290915280822054905190929183156108fc02918491818181858888f19350505050158015610ef1573d6000803e3d6000fd5b5060008481526016602090815260408083206001600160a01b0387168085529083529281902084905580519283529082018390527fd1ecb6c48be11bc10ebf5b0c43978edf1b7fcbc3f5adb6a5ea66952d6a73f72a910160405180910390a190505b92915050565b6000803411610fd05760405162461bcd60e51b815260206004820152603060248201527f54686520696e737572616e63652070726f76696465722073686f756c6420667560448201527f6e642074686520696e737572616e636500000000000000000000000000000000606482015260840161098e565b60405180610120016040528060011515815260200189815260200188815260200187600281111561100357611003611ada565b8152602001336001600160a01b031681526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092018290525093855250505060208083018790526040928301869052601754825260108152908290208351815490151560ff1991821617825591840151600180830191909155928401516002808301919091556060850151600383018054939591949093169184908111156110f5576110f5611ada565b021790555060808201516003820180546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117905560a082015160048201906111529082611d17565b5060c082015160058201906111679082611d17565b5060e0820151600682015561010090910151600790910155601780546000908152600c6020908152604080832080546001818101835591855283852001805473ffffffffffffffffffffffffffffffffffffffff19163390811790915585546019805493840190557f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695909201829055908452600d83528184203490819055855485526011845282852091855292529182902055905490517fa1467d518e9fa2c94583b5b96dc6d322c27e6ddfbbc24450b818b91c909046a69161124d9190815260200190565b60405180910390a16017805490600061126583611c99565b90915550506017549a9950505050505050505050565b33600090815260126020908152604080832084845290915290205460ff161561130c5760405162461bcd60e51b815260206004820152603360248201527f54686520636c69656e742068617320616c72656164792074616b656e2074686960448201527f732074797065206f6620696e737572616e636500000000000000000000000000606482015260840161098e565b600034116113825760405162461bcd60e51b815260206004820152602b60248201527f54686520636c69656e742073686f756c642073656e642045544820746f20627560448201527f7920696e737572616e6365000000000000000000000000000000000000000000606482015260840161098e565b60008181526010602052604081206007015461139e9034611dd7565b6000838152600d602052604090205490915081106113fe5760405162461bcd60e51b815260206004820152601c60248201527f596f752073686f756c64206275792077697468206c6573732045544800000000604482015260640161098e565b336000818152600f602090815260408083208684528252808320859055838352601282528083208684528252808320805460ff191660019081179091556013835281842080549182018155845282842001805473ffffffffffffffffffffffffffffffffffffffff1916851790559282526014815282822085835290529081203490555b6000838152600c602052604090205481101561158e576017546000908152600d602090815260408083205486845260118352818420600c9093529083208054919291849190869081106114d7576114d7611dee565b60009182526020808320909101546001600160a01b031683528201929092526040019020546115069190611e04565b611511906064611dd7565b9050600061151f3483611dd7565b6000868152600c602052604090208054919250908490811061154357611543611dee565b60009182526020822001546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015611583573d6000803e3d6000fd5b505050600101611482565b5060408051338152602081018490527fb54ae6df4548fec2c87618979584a234918d0b316ae59007568ff6be22d7a0bc910160405180910390a1506000908152601660209081526040808320338452909152812055565b6115ed6116a2565b6115f6816116fe565b50565b8260025414611637576040517fd068bf5b0000000000000000000000000000000000000000000000000000000081526004810184905260240161098e565b60036116438382611d17565b50601f6116508382611d17565b50600461165d8282611d17565b50827f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b50601f6003600460405161169593929190611ea3565b60405180910390a2505050565b6000546001600160a01b031633146116fc5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161098e565b565b336001600160a01b038216036117565760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161098e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126117db57600080fd5b813567ffffffffffffffff808211156117f6576117f66117b4565b604051601f8301601f19908116603f0116810190828211818310171561181e5761181e6117b4565b8160405283815286602085880101111561183757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561186c57600080fd5b83359250602084013567ffffffffffffffff8082111561188b57600080fd5b611897878388016117ca565b935060408601359150808211156118ad57600080fd5b506118ba868287016117ca565b9150509250925092565b60008083601f8401126118d657600080fd5b50813567ffffffffffffffff8111156118ee57600080fd5b60208301915083602082850101111561190657600080fd5b9250929050565b60008060008060006060868803121561192557600080fd5b85359450602086013567ffffffffffffffff8082111561194457600080fd5b61195089838a016118c4565b9096509450604088013591508082111561196957600080fd5b50611976888289016118c4565b969995985093965092949392505050565b80356001600160a01b038116811461199e57600080fd5b919050565b600080604083850312156119b657600080fd5b823591506119c660208401611987565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611a105783516001600160a01b0316835292840192918401916001016119eb565b50909695505050505050565b60008060408385031215611a2f57600080fd5b611a3883611987565b946020939093013593505050565b6000815180845260005b81811015611a6c57602081850181015186830182015201611a50565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611a9f6020830184611a46565b9392505050565b600060208284031215611ab857600080fd5b611a9f82611987565b600060208284031215611ad357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60006101208b151583528a602084015289604084015260038910611b2457634e487b7160e01b600052602160045260246000fd5b8860608401526001600160a01b03881660808401528060a0840152611b4b81840188611a46565b905082810360c0840152611b5f8187611a46565b60e084019590955250506101000152979650505050505050565b60008060408385031215611b8c57600080fd5b50508035926020909101359150565b600080600080600080600080600060e08a8c031215611bb957600080fd5b893567ffffffffffffffff80821115611bd157600080fd5b611bdd8d838e016118c4565b909b50995060208c0135985060408c0135975060608c0135915060038210611c0457600080fd5b90955060808b01359080821115611c1a57600080fd5b50611c278c828d016118c4565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b600181811c90821680611c5d57607f821691505b602082108103611c7d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006000198203611cac57611cac611c83565b5060010190565b80820180821115610f5357610f53611c83565b601f821115611d12576000816000526020600020601f850160051c81016020861015611cef5750805b601f850160051c820191505b81811015611d0e57828155600101611cfb565b5050505b505050565b815167ffffffffffffffff811115611d3157611d316117b4565b611d4581611d3f8454611c49565b84611cc6565b602080601f831160018114611d7a5760008415611d625750858301515b600019600386901b1c1916600185901b178555611d0e565b600085815260208120601f198616915b82811015611da957888601518255948401946001909101908401611d8a565b5085821015611dc75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417610f5357610f53611c83565b634e487b7160e01b600052603260045260246000fd5b600082611e2157634e487b7160e01b600052601260045260246000fd5b500490565b60008154611e3381611c49565b808552602060018381168015611e505760018114611e6a57611e98565b60ff198516838901528284151560051b8901019550611e98565b866000528260002060005b85811015611e905781548a8201860152908301908401611e75565b890184019650505b505050505092915050565b606081526000611eb66060830186611e26565b8281036020840152611ec88186611e26565b90508281036040840152611edc8185611e26565b969550505050505056fea26469706673582212209502f92aff31a237587a96a87f688682c2c48e9bc6b5b96bd85f14181ac92bfb64736f6c63430008180033636f6e7374206368617261637465724964203d20617267735b305d3b636f6e737420617069526573706f6e7365203d2061776169742046756e6374696f6e732e6d616b654874747052657175657374287b75726c3a206068747470733a2f2f73776170692e696e666f2f6170692f70656f706c652f247b63686172616374657249647d2f607d293b69662028617069526573706f6e73652e6572726f7229207b7468726f77204572726f72282752657175657374206661696c656427293b7d636f6e7374207b2064617461207d203d20617069526573706f6e73653b72657475726e2046756e6374696f6e732e656e636f6465537472696e6728646174612e6e616d65293b",
  "deployedBytecode": "0x6080604052600436106101e75760003560e01c806360e6c3a21161010e578063b6b1ccf0116100a7578063c33c097d11610079578063d0beac3f11610061578063d0beac3f146106ac578063d96a094a146106d9578063f2fde38b146106ec57005b8063c33c097d1461066c578063cfa29c441461067f57005b8063b6b1ccf0146105f7578063b8e12d4e14610617578063bcc6587f14610637578063be95e01a1461064c57005b806383cb0c81116100e057806383cb0c811461058e5780638da5cb5b146105a3578063b1e21749146105c1578063b5bc78ed146105d757005b806360e6c3a21461048f57806369e88be7146104bb5780636de994c5146104e857806379ba50971461057957005b80634b0795a81161018057806351ca570a1161015257806351ca570a146103f857806352ac183b1461043157806359fb49f9146104445780635acf77b01461047957005b80634b0795a8146103815780634d2e03a0146103965780634d7fedfa146103ab57806350f3fc81146103c057005b80632f8ff3a2116101b95780632f8ff3a2146102b35780633944ea3a146102eb578063430605391461030d578063477099661461034857005b80630ca76175146101f0578063102ec4a21461021057806315bef4501461024b578063212414181461029157005b366101ee57005b005b3480156101fc57600080fd5b506101ee61020b366004611857565b61070c565b34801561021c57600080fd5b5061023661022b36600461190d565b600095945050505050565b60405190151581526020015b60405180910390f35b34801561025757600080fd5b506102836102663660046119a3565b601160209081526000928352604080842090915290825290205481565b604051908152602001610242565b34801561029d57600080fd5b506102a66107a9565b60405161024291906119cf565b3480156102bf57600080fd5b506102836102ce366004611a1c565b600f60209081526000928352604080842090915290825290205481565b3480156102f757600080fd5b5061030061080b565b6040516102429190611a8c565b34801561031957600080fd5b506102366103283660046119a3565b600e60209081526000928352604080842090915290825290205460ff1681565b34801561035457600080fd5b50610236610363366004611aa6565b6001600160a01b031660009081526006602052604090205460ff1690565b34801561038d57600080fd5b50610300610899565b3480156103a257600080fd5b506103006108a6565b3480156103b757600080fd5b50600854610283565b3480156103cc57600080fd5b506103e06103db366004611ac1565b6108b3565b6040516001600160a01b039091168152602001610242565b34801561040457600080fd5b50610236610413366004611ac1565b33600090815260146020908152604080832093835292905220541590565b61028361043f366004611ac1565b6108dd565b34801561045057600080fd5b5061046461045f366004611ac1565b610a32565b60405161024299989796959493929190611af0565b34801561048557600080fd5b5061028360175481565b34801561049b57600080fd5b506009546104a99060ff1681565b60405160ff9091168152602001610242565b3480156104c757600080fd5b506102836104d6366004611ac1565b600d6020526000908152604090205481565b3480156104f457600080fd5b50610236610503366004611aa6565b6001600160a01b03166000818152600660205260408120805460ff1916600190811790915560088054808301825592527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3909101805473ffffffffffffffffffffffffffffffffffffffff191690921790915590565b34801561058557600080fd5b506101ee610b9d565b34801561059a57600080fd5b506102a6610c5b565b3480156105af57600080fd5b506000546001600160a01b03166103e0565b3480156105cd57600080fd5b5061028360025481565b3480156105e357600080fd5b506102836105f2366004611ac1565b610cbb565b34801561060357600080fd5b506103e0610612366004611ac1565b610cdc565b34801561062357600080fd5b506103e0610632366004611b79565b610cec565b34801561064357600080fd5b506101ee610d24565b34801561065857600080fd5b506102836106673660046119a3565b610e0b565b61028361067a366004611b9b565b610f59565b34801561068b57600080fd5b5061028361069a366004611ac1565b600b6020526000908152604090205481565b3480156106b857600080fd5b506102836106c7366004611ac1565b6000908152600d602052604090205490565b6101ee6106e7366004611ac1565b61127b565b3480156106f857600080fd5b506101ee610707366004611aa6565b6115e5565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461076e576040517fc6829f8300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6107798383836115f9565b60405183907f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e690600090a2505050565b6060600a80548060200260200160405190810160405280929190818152602001828054801561080157602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116107e3575b5050505050905090565b6003805461081890611c49565b80601f016020809104026020016040519081016040528092919081815260200182805461084490611c49565b80156108915780601f1061086657610100808354040283529160200191610891565b820191906000526020600020905b81548152906001019060200180831161087457829003601f168201915b505050505081565b6004805461081890611c49565b601f805461081890611c49565b600881815481106108c357600080fd5b6000918252602090912001546001600160a01b0316905081565b6000818152600e6020908152604080832033845290915281205460ff166109975760405162461bcd60e51b815260206004820152604b60248201527f546865206c69717569646974792070726f76696465722068617320616c72656160448201527f64792070726f766973696f6e6564206c697175696469747920666f722074686960648201527f7320696e737572616e6365000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b6000828152600b602052604081208054916109b183611c99565b90915550506000828152600d60205260409020546109d0903490611cb3565b6000838152600d6020908152604080832093909355600c8152828220805460018101825590835281832001805473ffffffffffffffffffffffffffffffffffffffff191633908117909155858352601182528383209083529052203490555090565b6010602052600090815260409020805460018201546002830154600384015460048501805460ff9586169694959394938316936101009093046001600160a01b0316929190610a8090611c49565b80601f0160208091040260200160405190810160405280929190818152602001828054610aac90611c49565b8015610af95780601f10610ace57610100808354040283529160200191610af9565b820191906000526020600020905b815481529060010190602001808311610adc57829003601f168201915b505050505090806005018054610b0e90611c49565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3a90611c49565b8015610b875780601f10610b5c57610100808354040283529160200191610b87565b820191906000526020600020905b815481529060010190602001808311610b6a57829003601f168201915b5050505050908060060154908060070154905089565b6001546001600160a01b03163314610bf75760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e657200000000000000000000604482015260640161098e565b600080543373ffffffffffffffffffffffffffffffffffffffff19808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b60606008805480602002602001604051908101604052809291908181526020018280548015610801576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116107e3575050505050905090565b60198181548110610ccb57600080fd5b600091825260209091200154905081565b600a81815481106108c357600080fd5b600c6020528160005260406000208181548110610d0857600080fd5b6000918252602090912001546001600160a01b03169150829050565b336000908152601a602052604090205460ff1615610d845760405162461bcd60e51b815260206004820152601f60248201527f56616c696461746f7220697320616c7265616479207265676973746572656400604482015260640161098e565b601880546001810182556000919091527fb13d2d76d1f4b7be834882e410b3e3a8afaf69f83600ae24db354391d2378d2e01805473ffffffffffffffffffffffffffffffffffffffff1916339081179091556040519081527fe366c1c0452ed8eec96861e9e54141ebff23c9ec89fe27b996b45f5ec38849879060200160405180910390a1565b60008281526016602090815260408083206001600160a01b038516845290915281205415610ea15760405162461bcd60e51b815260206004820152602560248201527f54686520636c69656e742068617320616c726561647920636c61696d6564207060448201527f61796f7574000000000000000000000000000000000000000000000000000000606482015260840161098e565b6001600160a01b0382166000818152600f6020908152604080832087845290915280822054905190929183156108fc02918491818181858888f19350505050158015610ef1573d6000803e3d6000fd5b5060008481526016602090815260408083206001600160a01b0387168085529083529281902084905580519283529082018390527fd1ecb6c48be11bc10ebf5b0c43978edf1b7fcbc3f5adb6a5ea66952d6a73f72a910160405180910390a190505b92915050565b6000803411610fd05760405162461bcd60e51b815260206004820152603060248201527f54686520696e737572616e63652070726f76696465722073686f756c6420667560448201527f6e642074686520696e737572616e636500000000000000000000000000000000606482015260840161098e565b60405180610120016040528060011515815260200189815260200188815260200187600281111561100357611003611ada565b8152602001336001600160a01b031681526020018b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505090825250604080516020601f890181900481028201810190925287815291810191908890889081908401838280828437600092018290525093855250505060208083018790526040928301869052601754825260108152908290208351815490151560ff1991821617825591840151600180830191909155928401516002808301919091556060850151600383018054939591949093169184908111156110f5576110f5611ada565b021790555060808201516003820180546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117905560a082015160048201906111529082611d17565b5060c082015160058201906111679082611d17565b5060e0820151600682015561010090910151600790910155601780546000908152600c6020908152604080832080546001818101835591855283852001805473ffffffffffffffffffffffffffffffffffffffff19163390811790915585546019805493840190557f944998273e477b495144fb8794c914197f3ccb46be2900f4698fd0ef743c9695909201829055908452600d83528184203490819055855485526011845282852091855292529182902055905490517fa1467d518e9fa2c94583b5b96dc6d322c27e6ddfbbc24450b818b91c909046a69161124d9190815260200190565b60405180910390a16017805490600061126583611c99565b90915550506017549a9950505050505050505050565b33600090815260126020908152604080832084845290915290205460ff161561130c5760405162461bcd60e51b815260206004820152603360248201527f54686520636c69656e742068617320616c72656164792074616b656e2074686960448201527f732074797065206f6620696e737572616e636500000000000000000000000000606482015260840161098e565b600034116113825760405162461bcd60e51b815260206004820152602b60248201527f54686520636c69656e742073686f756c642073656e642045544820746f20627560448201527f7920696e737572616e6365000000000000000000000000000000000000000000606482015260840161098e565b60008181526010602052604081206007015461139e9034611dd7565b6000838152600d602052604090205490915081106113fe5760405162461bcd60e51b815260206004820152601c60248201527f596f752073686f756c64206275792077697468206c6573732045544800000000604482015260640161098e565b336000818152600f602090815260408083208684528252808320859055838352601282528083208684528252808320805460ff191660019081179091556013835281842080549182018155845282842001805473ffffffffffffffffffffffffffffffffffffffff1916851790559282526014815282822085835290529081203490555b6000838152600c602052604090205481101561158e576017546000908152600d602090815260408083205486845260118352818420600c9093529083208054919291849190869081106114d7576114d7611dee565b60009182526020808320909101546001600160a01b031683528201929092526040019020546115069190611e04565b611511906064611dd7565b9050600061151f3483611dd7565b6000868152600c602052604090208054919250908490811061154357611543611dee565b60009182526020822001546040516001600160a01b039091169183156108fc02918491818181858888f19350505050158015611583573d6000803e3d6000fd5b505050600101611482565b5060408051338152602081018490527fb54ae6df4548fec2c87618979584a234918d0b316ae59007568ff6be22d7a0bc910160405180910390a1506000908152601660209081526040808320338452909152812055565b6115ed6116a2565b6115f6816116fe565b50565b8260025414611637576040517fd068bf5b0000000000000000000000000000000000000000000000000000000081526004810184905260240161098e565b60036116438382611d17565b50601f6116508382611d17565b50600461165d8282611d17565b50827f160ed0aaffbef6885155188b91459cb5a97d5daadccf7561d8c46deea6641b50601f6003600460405161169593929190611ea3565b60405180910390a2505050565b6000546001600160a01b031633146116fc5760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e657200000000000000000000604482015260640161098e565b565b336001600160a01b038216036117565760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161098e565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126117db57600080fd5b813567ffffffffffffffff808211156117f6576117f66117b4565b604051601f8301601f19908116603f0116810190828211818310171561181e5761181e6117b4565b8160405283815286602085880101111561183757600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561186c57600080fd5b83359250602084013567ffffffffffffffff8082111561188b57600080fd5b611897878388016117ca565b935060408601359150808211156118ad57600080fd5b506118ba868287016117ca565b9150509250925092565b60008083601f8401126118d657600080fd5b50813567ffffffffffffffff8111156118ee57600080fd5b60208301915083602082850101111561190657600080fd5b9250929050565b60008060008060006060868803121561192557600080fd5b85359450602086013567ffffffffffffffff8082111561194457600080fd5b61195089838a016118c4565b9096509450604088013591508082111561196957600080fd5b50611976888289016118c4565b969995985093965092949392505050565b80356001600160a01b038116811461199e57600080fd5b919050565b600080604083850312156119b657600080fd5b823591506119c660208401611987565b90509250929050565b6020808252825182820181905260009190848201906040850190845b81811015611a105783516001600160a01b0316835292840192918401916001016119eb565b50909695505050505050565b60008060408385031215611a2f57600080fd5b611a3883611987565b946020939093013593505050565b6000815180845260005b81811015611a6c57602081850181015186830182015201611a50565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611a9f6020830184611a46565b9392505050565b600060208284031215611ab857600080fd5b611a9f82611987565b600060208284031215611ad357600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60006101208b151583528a602084015289604084015260038910611b2457634e487b7160e01b600052602160045260246000fd5b8860608401526001600160a01b03881660808401528060a0840152611b4b81840188611a46565b905082810360c0840152611b5f8187611a46565b60e084019590955250506101000152979650505050505050565b60008060408385031215611b8c57600080fd5b50508035926020909101359150565b600080600080600080600080600060e08a8c031215611bb957600080fd5b893567ffffffffffffffff80821115611bd157600080fd5b611bdd8d838e016118c4565b909b50995060208c0135985060408c0135975060608c0135915060038210611c0457600080fd5b90955060808b01359080821115611c1a57600080fd5b50611c278c828d016118c4565b9a9d999c50979a96999598959660a08101359660c09091013595509350505050565b600181811c90821680611c5d57607f821691505b602082108103611c7d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006000198203611cac57611cac611c83565b5060010190565b80820180821115610f5357610f53611c83565b601f821115611d12576000816000526020600020601f850160051c81016020861015611cef5750805b601f850160051c820191505b81811015611d0e57828155600101611cfb565b5050505b505050565b815167ffffffffffffffff811115611d3157611d316117b4565b611d4581611d3f8454611c49565b84611cc6565b602080601f831160018114611d7a5760008415611d625750858301515b600019600386901b1c1916600185901b178555611d0e565b600085815260208120601f198616915b82811015611da957888601518255948401946001909101908401611d8a565b5085821015611dc75787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082028115828204841417610f5357610f53611c83565b634e487b7160e01b600052603260045260246000fd5b600082611e2157634e487b7160e01b600052601260045260246000fd5b500490565b60008154611e3381611c49565b808552602060018381168015611e505760018114611e6a57611e98565b60ff198516838901528284151560051b8901019550611e98565b866000528260002060005b85811015611e905781548a8201860152908301908401611e75565b890184019650505b505050505092915050565b606081526000611eb66060830186611e26565b8281036020840152611ec88186611e26565b90508281036040840152611edc8185611e26565b969550505050505056fea26469706673582212209502f92aff31a237587a96a87f688682c2c48e9bc6b5b96bd85f14181ac92bfb64736f6c63430008180033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(uint256)": {
        "details": "Buy weather insurance."
      },
      "claimInsurancePayout(uint256,string,string)": {
        "details": "Claim insurance"
      },
      "constructor": {
        "details": "Constructor      initialize global variable for insurance ids"
      },
      "fundInsurance(uint256)": {
        "details": "liquidity providers can deposit funds in any amount to support any insurance"
      },
      "getInsuranceFunds(uint256)": {
        "details": "to see how much fund an insurance is supported with"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "details": "Either response or error parameter will be set, but never both.",
        "params": {
          "err": "Aggregated error either from the request's source code or from the execution pipeline.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the request's source code."
        }
      },
      "payout(uint256,address)": {
        "details": "Transfers eligible payout funds to insuree"
      },
      "registerInsurance(string,uint256,uint256,uint8,string,uint256,uint256)": {
        "details": "Register insurance by provising all required fields. The caller should be an insurance provider"
      },
      "registerInsuranceProvider(address)": {
        "details": "Add an insurance to the registration queue      Can only be called from InsuranceApp contract"
      },
      "registerValidator()": {
        "details": "to register a validator."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the Functions Router during fullilment from the designated transmitter node in an OCR round."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 816,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 818,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2285,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_lastRequestId",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 2287,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_lastResponse",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2289,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "s_lastError",
        "offset": 0,
        "slot": "4",
        "type": "t_bytes_storage"
      },
      {
        "astId": 2291,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "contractOwner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 2295,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "registeredInsuranceProvider",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2299,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "authorizedContracts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2302,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "providers",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2304,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "numFundedInsuranceProviders",
        "offset": 0,
        "slot": "9",
        "type": "t_uint8"
      },
      {
        "astId": 2307,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "alreadyFundedInsuranceProviders",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2311,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "numliquidityproviders",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2316,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insurancelps",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2320,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuranceliquidity",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2326,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "hasProvidedLiquidity",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2332,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "claimablePayout",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2361,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insurances",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_struct(Insurance)2356_storage)"
      },
      {
        "astId": 2367,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "liquidityperlp",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2373,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "clientinsured",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2378,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuranceProviderInsurees",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2384,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuredamount",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2388,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "fundedinsurance",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2394,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuredpayout",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2396,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuranceId",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 2399,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "validators",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2402,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "insuranceIds",
        "offset": 0,
        "slot": "25",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2406,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "validatorAlreadyExists",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2451,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "router",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 2454,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "source",
        "offset": 0,
        "slot": "28",
        "type": "t_string_storage"
      },
      {
        "astId": 2457,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "gasLimit",
        "offset": 0,
        "slot": "29",
        "type": "t_uint32"
      },
      {
        "astId": 2460,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "donID",
        "offset": 0,
        "slot": "30",
        "type": "t_bytes32"
      },
      {
        "astId": 2462,
        "contract": "contracts/InsuranceData.sol:InsuranceData",
        "label": "character",
        "offset": 0,
        "slot": "31",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(TypeOfInsurance)2336": {
        "encoding": "inplace",
        "label": "enum InsuranceData.TypeOfInsurance",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(Insurance)2356_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct InsuranceData.Insurance)",
        "numberOfBytes": "32",
        "value": "t_struct(Insurance)2356_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Insurance)2356_storage": {
        "encoding": "inplace",
        "label": "struct InsuranceData.Insurance",
        "members": [
          {
            "astId": 2338,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "isRegistered",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 2340,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "start",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2342,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "end",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2345,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "typeOfIns",
            "offset": 0,
            "slot": "3",
            "type": "t_enum(TypeOfInsurance)2336"
          },
          {
            "astId": 2347,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "provider",
            "offset": 1,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 2349,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "name",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2351,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          },
          {
            "astId": 2353,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "riskNumerator",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2355,
            "contract": "contracts/InsuranceData.sol:InsuranceData",
            "label": "riskDenominator",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}